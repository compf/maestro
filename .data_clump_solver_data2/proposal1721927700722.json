{
  "refactorings": {
    "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowActionHandler.java": [
      {
        "fromLine": 179,
        "toLine": 243,
        "oldContent": "  /**\n   * Run a batch of foreach workflow instances for a given workflow and version. The request list\n   * has already been sized by insertBatchLimit in StepRuntimeProperties.Foreach. Note that batch\n   * start only supports a fresh new run (run_id=1). Additionally, the instance ids have already\n   * been decided to avoid race condition and ensure idempotency. It will bypass run strategy\n   * manager as foreach manages its own inline workflow instances.\n   *\n   * @param batchSize the batch size for run job instance uuids within a run job event.\n   * @return the status of start foreach workflow instances.\n   */\n  public Optional<Details> runForeachBatch(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      RunProperties runProperties,\n      String foreachStepId,\n      ForeachArtifact artifact,\n      List<RunRequest> requests,\n      List<Long> instanceIds,\n      int batchSize) {\n    if (ObjectHelper.isCollectionEmptyOrNull(requests)) {\n      return Optional.empty();\n    }\n    Checks.checkTrue(\n        requests.size() == instanceIds.size(),\n        \"Run request list size [%s] must match instance id list size [%s]\",\n        requests.size(),\n        instanceIds.size());\n    List<WorkflowInstance> instances;\n    if (artifact.isFreshRun()) {\n      instances =\n          createStartForeachInstances(\n              workflow,\n              internalId,\n              workflowVersionId,\n              artifact.getForeachRunId(),\n              runProperties,\n              requests,\n              instanceIds);\n    } else {\n      instances =\n          createRestartForeachInstances(\n              workflow,\n              internalId,\n              workflowVersionId,\n              runProperties,\n              foreachStepId,\n              artifact,\n              requests,\n              instanceIds);\n    }\n    if (ObjectHelper.isCollectionEmptyOrNull(instances)) {\n      return Optional.empty();\n    }\n    return instanceDao.runWorkflowInstances(workflow.getId(), instances, batchSize);\n  }",
        "newContent": "  /**\n   * Run a batch of foreach workflow instances for a given workflow and version. The request list\n   * has already been sized by insertBatchLimit in StepRuntimeProperties.Foreach. Note that batch\n   * start only supports a fresh new run (run_id=1). Additionally, the instance ids have already\n   * been decided to avoid race condition and ensure idempotency. It will bypass run strategy\n   * manager as foreach manages its own inline workflow instances.\n   *\n   * @param batchSize the batch size for run job instance uuids within a run job event.\n   * @return the status of start foreach workflow instances.\n   */\n  public Optional<Details> runForeachBatch(ForeachBatchContext context, int batchSize) {\n    List<RunRequest> requests = context.getRequests();\n    List<Long> instanceIds = context.getInstanceIds();\n    if (ObjectHelper.isCollectionEmptyOrNull(requests)) {\n      return Optional.empty();\n    }\n    Checks.checkTrue(\n        requests.size() == instanceIds.size(),\n        \"Run request list size [%s] must match instance id list size [%s]\",\n        requests.size(),\n        instanceIds.size());\n    List<WorkflowInstance> instances;\n    if (context.getArtifact().isFreshRun()) {\n      instances = createStartForeachInstances(context);\n    } else {\n      instances = createRestartForeachInstances(context);\n    }\n    if (ObjectHelper.isCollectionEmptyOrNull(instances)) {\n      return Optional.empty();\n    }\n    return instanceDao.runWorkflowInstances(context.getWorkflow().getId(), instances, batchSize);\n  }"
      },
      {
        "fromLine": 245,
        "toLine": 305,
        "oldContent": "        createWorkflowInstances(workflow, internalId, workflowVersionId, runProperties, requests);\n\n    Iterator<Long> instanceId = instanceIds.iterator();\n    for (WorkflowInstance instance : instances) {\n      instance.setWorkflowInstanceId(instanceId.next());\n      instance.setWorkflowRunId(workflowRunId);\n    }\n    return instances;\n  }\n\n  private List<WorkflowInstance> createRestartForeachInstances(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      RunProperties runProperties,\n      String foreachStepId,\n      ForeachArtifact artifact,\n      List<RunRequest> requests,\n      List<Long> instanceIds) {\n    long totalAncestorIterations =\n        ObjectHelper.valueOrDefault(artifact.getAncestorIterationCount(), 0L);\n    List<WorkflowInstance> instances = new ArrayList<>();\n\n    Iterator<Long> instanceIditerator = instanceIds.iterator();\n    for (RunRequest request : requests) {\n\n      long instanceId = instanceIditerator.next();\n      if (instanceId > totalAncestorIterations) {\n        RunRequest.RunRequestBuilder requestBuilder =\n            request.toBuilder().currentPolicy(RunPolicy.RESTART_FROM_BEGINNING);\n        if (!isRestartFromInlineRootMode(request, workflow)) {\n          requestBuilder.restartConfig(null);\n        }\n        WorkflowInstance instance =\n            workflowHelper.createWorkflowInstance(\n                workflow.toBuilder().build(),\n                internalId,\n                workflowVersionId,\n                runProperties,\n                requestBuilder.build());\n        instance.setWorkflowInstanceId(instanceId);\n        instance.setWorkflowRunId(artifact.getForeachRunId());\n        instances.add(instance);\n      } else {\n        WorkflowInstance instance =\n            instanceDao.getLatestWorkflowInstanceRun(workflow.getId(), instanceId);\n        if (!isRestartFromInlineRootMode(request, workflow)) {\n          request.updateForDownstreamIfNeeded(foreachStepId, instance);\n        }\n        workflowHelper.updateWorkflowInstance(instance, request);\n        instance.setWorkflowRunId(artifact.getForeachRunId());\n        instances.add(instance);\n      }\n    }\n    return instances;\n  }\n\n  public Optional<Details> restartForeachInstance(\n      RunRequest request, WorkflowInstance instance, String foreachStepId, long restartRunId) {\n    request.updateForDownstreamIfNeeded(foreachStepId, instance);",
        "newContent": "        createWorkflowInstances(context.getWorkflow(), context.getInternalId(), context.getWorkflowVersionId(), context.getRunProperties(), context.getRequests());\n\n    Iterator<Long> instanceId = context.getInstanceIds().iterator();\n    for (WorkflowInstance instance : instances) {\n      instance.setWorkflowInstanceId(instanceId.next());\n      instance.setWorkflowRunId(context.getArtifact().getForeachRunId());\n    }\n    return instances;\n  }\n\n  private List<WorkflowInstance> createRestartForeachInstances(ForeachBatchContext context) {\n    long totalAncestorIterations =\n        ObjectHelper.valueOrDefault(context.getArtifact().getAncestorIterationCount(), 0L);\n    List<WorkflowInstance> instances = new ArrayList<>();\n\n    Iterator<Long> instanceIditerator = context.getInstanceIds().iterator();\n    for (RunRequest request : context.getRequests()) {\n\n      long instanceId = instanceIditerator.next();\n      if (instanceId > totalAncestorIterations) {\n        RunRequest.RunRequestBuilder requestBuilder =\n            request.toBuilder().currentPolicy(RunPolicy.RESTART_FROM_BEGINNING);\n        if (!isRestartFromInlineRootMode(request, context.getWorkflow())) {\n          requestBuilder.restartConfig(null);\n        }\n        WorkflowInstance instance =\n            workflowHelper.createWorkflowInstance(\n                context.getWorkflow().toBuilder().build(),\n                context.getInternalId(),\n                context.getWorkflowVersionId(),\n                context.getRunProperties(),\n                requestBuilder.build());\n        instance.setWorkflowInstanceId(instanceId);\n        instance.setWorkflowRunId(context.getArtifact().getForeachRunId());\n        instances.add(instance);\n      } else {\n        WorkflowInstance instance =\n            instanceDao.getLatestWorkflowInstanceRun(context.getWorkflow().getId(), instanceId);\n        if (!isRestartFromInlineRootMode(request, context.getWorkflow())) {\n          request.updateForDownstreamIfNeeded(context.getForeachStepId(), instance);\n        }\n        workflowHelper.updateWorkflowInstance(instance, request);\n        instance.setWorkflowRunId(context.getArtifact().getForeachRunId());\n        instances.add(instance);\n      }\n    }\n    return instances;\n  }\n\n  public Optional<Details> restartForeachInstance(\n      RunRequest request, WorkflowInstance instance, String foreachStepId, long restartRunId) {\n    request.updateForDownstreamIfNeeded(foreachStepId, instance);"
      }
    ]
  },
  "extractedClasses": {
    "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/ForeachBatchContext.java": "package com.netflix.maestro.engine.handlers;\n\nimport com.netflix.maestro.common.Workflow;\nimport com.netflix.maestro.common.RunProperties;\nimport com.netflix.maestro.common.ForeachArtifact;\nimport java.util.List;\n\npublic class ForeachBatchContext {\n    private final Workflow workflow;\n    private final Long internalId;\n    private final long workflowVersionId;\n    private final RunProperties runProperties;\n    private final String foreachStepId;\n    private final ForeachArtifact artifact;\n    private final List<RunRequest> requests;\n    private final List<Long> instanceIds;\n\n    public ForeachBatchContext(\n        Workflow workflow,\n        Long internalId,\n        long workflowVersionId,\n        RunProperties runProperties,\n        String foreachStepId,\n        ForeachArtifact artifact,\n        List<RunRequest> requests,\n        List<Long> instanceIds) {\n        this.workflow = workflow;\n        this.internalId = internalId;\n        this.workflowVersionId = workflowVersionId;\n        this.runProperties = runProperties;\n        this.foreachStepId = foreachStepId;\n        this.artifact = artifact;\n        this.requests = requests;\n        this.instanceIds = instanceIds;\n    }\n\n    public Workflow getWorkflow() {\n        return workflow;\n    }\n\n    public Long getInternalId() {\n        return internalId;\n    }\n\n    public long getWorkflowVersionId() {\n        return workflowVersionId;\n    }\n\n    public RunProperties getRunProperties() {\n        return runProperties;\n    }\n\n    public String getForeachStepId() {\n        return foreachStepId;\n    }\n\n    public ForeachArtifact getArtifact() {\n        return artifact;\n    }\n\n    public List<RunRequest> getRequests() {\n        return requests;\n    }\n\n    public List<Long> getInstanceIds() {\n        return instanceIds;\n    }\n}"
  },
  "tenperature": 0.1,
  "date": "2024-07-25T17:15:00.719Z"
}