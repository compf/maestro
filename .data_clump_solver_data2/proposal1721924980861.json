{
  "refactorings": {
    "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowActionHandler.java": [
      {
        "fromLine": 57,
        "toLine": 103,
        "oldContent": "import lombok.extern.slf4j.Slf4j;\n\n/** Workflow actor to implement all workflow actions. */\n@Slf4j\n@AllArgsConstructor\npublic class WorkflowActionHandler {\n  private final MaestroWorkflowDao workflowDao;\n  private final MaestroWorkflowInstanceDao instanceDao;\n  private final MaestroRunStrategyDao runStrategyDao;\n  private final DryRunValidator dryRunValidator;\n  private final WorkflowHelper workflowHelper;\n\n  /**\n   * Start a workflow instance run. It first created a workflow instance in DB and then put it in a\n   * queue to check its run strategy. After run strategy check, the workflow instance then gets\n   * launched.\n   *\n   * @param workflowId workflow id\n   * @param version workflow version, `active`, `latest’, or exact version id\n   * @param runRequest run request with start configs and overrides\n   * @return the response\n   */\n  public RunResponse start(\n      @NotNull String workflowId, @NotNull String version, @NotNull RunRequest runRequest) {\n    WorkflowDefinition definition = workflowDao.getWorkflowDefinition(workflowId, version);\n\n    validateRequest(version, definition, runRequest);\n\n    RunProperties runProperties =\n        RunProperties.from(\n            Checks.notNull(\n                definition.getPropertiesSnapshot(),\n                \"property snapshot cannot be null for workflow: \" + workflowId));\n    // create and initiate a new instance with overrides and param evaluation\n    WorkflowInstance instance =\n        workflowHelper.createWorkflowInstance(\n            definition.getWorkflow(),\n            definition.getInternalId(),\n            definition.getMetadata().getWorkflowVersionId(),\n            runProperties,\n            runRequest);\n    RunStrategy runStrategy = definition.getRunStrategyOrDefault();\n    int ret = runStrategyDao.startWithRunStrategy(instance, runStrategy);\n    RunResponse response = RunResponse.from(instance, ret);\n    LOG.info(\"Created a workflow instance with response {}\", response);\n    return response;",
        "newContent": "import lombok.extern.slf4j.Slf4j;\n\n/** Workflow actor to implement all workflow actions. */\n@Slf4j\n@AllArgsConstructor\npublic class WorkflowActionHandler {\n  private final MaestroWorkflowDao workflowDao;\n  private final MaestroWorkflowInstanceDao instanceDao;\n  private final MaestroRunStrategyDao runStrategyDao;\n  private final DryRunValidator dryRunValidator;\n  private final WorkflowHelper workflowHelper;\n\n  /**\n   * Start a workflow instance run. It first created a workflow instance in DB and then put it in a\n   * queue to check its run strategy. After run strategy check, the workflow instance then gets\n   * launched.\n   *\n   * @param workflowId workflow id\n   * @param version workflow version, `active`, `latest’, or exact version id\n   * @param runRequest run request with start configs and overrides\n   * @return the response\n   */\n  public RunResponse start(\n      @NotNull String workflowId, @NotNull String version, @NotNull RunRequest runRequest) {\n    WorkflowDefinition definition = workflowDao.getWorkflowDefinition(workflowId, version);\n\n    validateRequest(version, definition, runRequest);\n\n    RunProperties runProperties =\n        RunProperties.from(\n            Checks.notNull(\n                definition.getPropertiesSnapshot(),\n                \"property snapshot cannot be null for workflow: \" + workflowId));\n    // create and initiate a new instance with overrides and param evaluation\n    WorkflowInstance instance =\n        workflowHelper.createWorkflowInstance(\n            new WorkflowInstanceCreationContext(\n                definition.getWorkflow(),\n                definition.getInternalId(),\n                definition.getMetadata().getWorkflowVersionId(),\n                runProperties),\n            runRequest);\n    RunStrategy runStrategy = definition.getRunStrategyOrDefault();\n    int ret = runStrategyDao.startWithRunStrategy(instance, runStrategy);\n    RunResponse response = RunResponse.from(instance, ret);\n    LOG.info(\"Created a workflow instance with response {}\", response);\n    return response;"
      },
      {
        "fromLine": 129,
        "toLine": 157,
        "oldContent": "public List<RunResponse> startBatch(\n      String workflowId, String version, List<RunRequest> requests) {\n    if (ObjectHelper.isCollectionEmptyOrNull(requests)) {\n      return Collections.emptyList();\n    }\n    Checks.checkTrue(\n        requests.size() <= Constants.START_BATCH_LIMIT,\n        \"The size of Requests is greater than the batch limit\");\n    WorkflowDefinition definition = workflowDao.getWorkflowDefinition(workflowId, version);\n\n    // Fail the whole batch if any request is invalid\n    requests.forEach(request -> validateRequest(version, definition, request));\n\n    RunProperties runProperties = RunProperties.from(definition.getPropertiesSnapshot());\n",
        "newContent": "public List<RunResponse> startBatch(\n      String workflowId, String version, List<RunRequest> requests) {\n    if (ObjectHelper.isCollectionEmptyOrNull(requests)) {\n      return Collections.emptyList();\n    }\n    Checks.checkTrue(\n        requests.size() <= Constants.START_BATCH_LIMIT,\n        \"The size of Requests is greater than the batch limit\");\n    WorkflowDefinition definition = workflowDao.getWorkflowDefinition(workflowId, version);\n\n    // Fail the whole batch if any request is invalid\n    requests.forEach(request -> validateRequest(version, definition, request));\n\n    RunProperties runProperties = RunProperties.from(definition.getPropertiesSnapshot());\n    WorkflowInstanceCreationContext context = new WorkflowInstanceCreationContext(\n        definition.getWorkflow(),\n        definition.getInternalId(),\n        definition.getMetadata().getWorkflowVersionId(),\n        runProperties);\n"
      },
      {
        "fromLine": 160,
        "toLine": 167,
        "oldContent": "            definition.getInternalId(),\n            definition.getMetadata().getWorkflowVersionId(),\n            runProperties,\n            requests);\n    RunStrategy runStrategy = definition.getRunStrategyOrDefault();\n    int[] results = runStrategyDao.startBatchWithRunStrategy(workflowId, runStrategy, instances);\n    List<RunResponse> responses = new ArrayList<>();",
        "newContent": "            context,\n            requests);\n    RunStrategy runStrategy = definition.getRunStrategyOrDefault();\n    int[] results = runStrategyDao.startBatchWithRunStrategy(workflowId, runStrategy, instances);\n    List<RunResponse> responses = new ArrayList<>();"
      },
      {
        "fromLine": 171,
        "toLine": 252,
        "oldContent": "public Optional<Details> runForeachBatch(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      RunProperties runProperties,\n      String foreachStepId,\n      ForeachArtifact artifact,\n      List<RunRequest> requests,\n      List<Long> instanceIds,\n      int batchSize) {\n    if (ObjectHelper.isCollectionEmptyOrNull(requests)) {\n      return Optional.empty();\n    }\n    Checks.checkTrue(\n        requests.size() == instanceIds.size(),\n        \"Run request list size [%s] must match instance id list size [%s]\",\n        requests.size(),\n        instanceIds.size());\n    List<WorkflowInstance> instances;\n    if (artifact.isFreshRun()) {\n      instances =\n          createStartForeachInstances(\n              workflow,\n              internalId,\n              workflowVersionId,\n              artifact.getForeachRunId(),\n              runProperties,\n              requests,\n              instanceIds);\n    } else {\n      instances =\n          createRestartForeachInstances(\n              workflow,\n              internalId,\n              workflowVersionId,\n              runProperties,\n              foreachStepId,\n              artifact,\n              requests,\n              instanceIds);\n    }\n    if (ObjectHelper.isCollectionEmptyOrNull(instances)) {\n      return Optional.empty();\n    }\n    return instanceDao.runWorkflowInstances(workflow.getId(), instances, batchSize);\n  }\n\n  private List<WorkflowInstance> createStartForeachInstances(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      long workflowRunId,\n      RunProperties runProperties,\n      List<RunRequest> requests,\n      List<Long> instanceIds) {\n    List<WorkflowInstance> instances =\n        createWorkflowInstances(workflow, internalId, workflowVersionId, runProperties, requests);\n\n    Iterator<Long> instanceId = instanceIds.iterator();\n    for (WorkflowInstance instance : instances) {\n      instance.setWorkflowInstanceId(instanceId.next());\n      instance.setWorkflowRunId(workflowRunId);\n    }",
        "newContent": "public Optional<Details> runForeachBatch(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      RunProperties runProperties,\n      String foreachStepId,\n      ForeachArtifact artifact,\n      List<RunRequest> requests,\n      List<Long> instanceIds,\n      int batchSize) {\n    if (ObjectHelper.isCollectionEmptyOrNull(requests)) {\n      return Optional.empty();\n    }\n    Checks.checkTrue(\n        requests.size() == instanceIds.size(),\n        \"Run request list size [%s] must match instance id list size [%s]\",\n        requests.size(),\n        instanceIds.size());\n    List<WorkflowInstance> instances;\n    WorkflowInstanceCreationContext context = new WorkflowInstanceCreationContext(\n        workflow,\n        internalId,\n        workflowVersionId,\n        runProperties);\n    if (artifact.isFreshRun()) {\n      instances =\n          createStartForeachInstances(\n              context,\n              artifact.getForeachRunId(),\n              requests,\n              instanceIds);\n    } else {\n      instances =\n          createRestartForeachInstances(\n              context,\n              foreachStepId,\n              artifact,\n              requests,\n              instanceIds);\n    }\n    if (ObjectHelper.isCollectionEmptyOrNull(instances)) {\n      return Optional.empty();\n    }\n    return instanceDao.runWorkflowInstances(workflow.getId(), instances, batchSize);\n  }\n\n  private List<WorkflowInstance> createStartForeachInstances(\n      WorkflowInstanceCreationContext context,\n      long workflowRunId,\n      List<RunRequest> requests,\n      List<Long> instanceIds) {\n    List<WorkflowInstance> instances =\n        createWorkflowInstances(context, requests);\n\n    Iterator<Long> instanceId = instanceIds.iterator();\n    for (WorkflowInstance instance : instances) {\n      instance.setWorkflowInstanceId(instanceId.next());\n      instance.setWorkflowRunId(workflowRunId);\n    }"
      },
      {
        "fromLine": 328,
        "toLine": 344,
        "oldContent": "private List<WorkflowInstance> createWorkflowInstances(\n      Workflow workflow,\n      Long internalId,\n      long workflowVersionId,\n      RunProperties runProperties,\n      List<RunRequest> requests) {\n    return requests.stream()\n        .map(\n            request ->\n                workflowHelper.createWorkflowInstance(\n                    workflow.toBuilder().build(),\n                    internalId,\n                    workflowVersionId,\n                    runProperties,\n                    request))",
        "newContent": "private List<WorkflowInstance> createWorkflowInstances(\n      WorkflowInstanceCreationContext context,\n      List<RunRequest> requests) {\n    return requests.stream()\n        .map(\n            request ->\n                workflowHelper.createWorkflowInstance(\n                    context,\n                    request))"
      }
    ]
  },
  "extractedClasses": {
    "maestro-engine/src/main/java/com/netflix/maestro/engine/handlers/WorkflowInstanceCreationContext.java": "public class WorkflowInstanceCreationContext {\n\n    private final Workflow workflow;\n    private final Long internalId;\n    private final long workflowVersionId;\n    private final RunProperties runProperties;\n\n    public WorkflowInstanceCreationContext(Workflow workflow, Long internalId, long workflowVersionId, RunProperties runProperties) {\n        this.workflow = workflow;\n        this.internalId = internalId;\n        this.workflowVersionId = workflowVersionId;\n        this.runProperties = runProperties;\n    }\n\n    public Workflow getWorkflow() {\n        return workflow;\n    }\n\n    public Long getInternalId() {\n        return internalId;\n    }\n\n    public long getWorkflowVersionId() {\n        return workflowVersionId;\n    }\n\n    public RunProperties getRunProperties() {\n        return runProperties;\n    }\n}"
  },
  "tenperature": 0.1,
  "date": "2024-07-25T16:29:40.851Z"
}